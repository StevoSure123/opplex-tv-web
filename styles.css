<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Live Stream</title>
    <link rel="stylesheet" href="https://vjs.zencdn.net/7.21.1/video-js.css">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        /* General Styling */
        body {
            background: linear-gradient(145deg, #000, #1c1c1c);
            color: white;
            font-family: 'Poppins', sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
            overflow: hidden;
        }

        #videoContainer {
            max-width: 900px;
            width: 95%;
            background: rgba(30, 30, 30, 0.95);
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.7), 0 0 20px rgba(255, 255, 255, 0.1);
            overflow: hidden;
            padding: 30px 20px 40px 20px;
            animation: fadeIn 0.8s ease-out;
            position: relative;
        }

        h1 {
            color: #ffffff;
            font-size: 2.5rem;
            text-align: center;
            margin-bottom: 20px;
            text-transform: uppercase;
            letter-spacing: 2px;
            text-shadow: 0 3px 6px rgba(0, 0, 0, 0.7), 0 0 8px rgba(255, 255, 255, 0.2);
        }

        .video-js {
            width: 100%;
            height: auto;
            border-radius: 15px;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.8), 0 0 15px rgba(255, 255, 255, 0.1);
        }

        .error-message {
            color: #FF5A5A;
            font-size: 1.2rem;
            text-align: center;
            margin-top: 20px;
            font-weight: 500;
        }

        .refresh-btn {
            display: inline-block;
            background: linear-gradient(135deg, #444, #222);
            color: white;
            font-weight: bold;
            padding: 15px 30px;
            border-radius: 15px;
            text-transform: uppercase;
            font-size: 1.1rem;
            margin-top: 20px;
            cursor: pointer;
            transition: all 0.4s ease;
            box-shadow: 0 5px 15px rgba(255, 255, 255, 0.1), 0 0 15px rgba(0, 0, 0, 0.3);
            text-align: center;
            width: 100%;
        }

        .refresh-btn:hover {
            transform: translateY(-3px) scale(1.05);
            box-shadow: 0 10px 25px rgba(255, 255, 255, 0.2), 0 0 25px rgba(0, 0, 0, 0.5);
        }

        .footer {
            position: absolute;
            bottom: 10px;
            width: 100%;
            text-align: center;
            color: rgba(255, 255, 255, 0.6);
            font-size: 0.9rem;
            letter-spacing: 0.5px;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
    </style>
</head>

<body>
    <div id="videoContainer">
        <h1 id="channel-name">Live Stream</h1>
        <video id="video" class="video-js vjs-default-skin vjs-big-play-centered" controls autoplay playsinline></video>
        <div class="error-message" id="error-message"></div>
        <div id="refresh" class="refresh-btn" onclick="reloadStream()">Refresh Stream</div>
    </div>
    <div class="footer">Crafted with ❤️ by StevoSure</div>
    <script src="https://vjs.zencdn.net/7.21.1/video.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
    <script src="https://cdn.jsdelivr.net/npm/videojs-contrib-dash@latest"></script>
    <script>
        const params = new URLSearchParams(window.location.search);
        const streamUrl = decodeURIComponent(params.get('url'));
        const channelName = decodeURIComponent(params.get('name')) || "Live Stream";
        document.getElementById('channel-name').innerText = channelName;
        const errorMessage = document.getElementById('error-message');
        const videoElement = document.getElementById('video');
        const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
        const player = videojs(videoElement, {
            autoplay: true,
            controls: true,
            preload: 'auto',
            liveui: true,
            fluid: true
        });
        let hls;
        function loadStream() {
            errorMessage.innerText = ""; // Reset error message
            if (!isMobile && Hls.isSupported() && streamUrl.includes(".m3u8")) {
                hls = new Hls({
                    liveSyncDurationCount: 3,
                    liveMaxLatencyDurationCount: 5,
                    startLevel: -1, // Auto select the optimal level for HLS
                    maxMaxBufferLength: 30, // Control the buffer length for a smoother experience
                });
                hls.on(Hls.Events.ERROR, (event, data) => {
                    if (data.fatal) {
                        console.error("Fatal error detected: ", data);
                        errorMessage.innerText = "Stream error. Retrying...";
                        hls.destroy();
                        setTimeout(loadStream, 5000); // Retry after 5 seconds
                    }
                });
                hls.loadSource(streamUrl);
                hls.attachMedia(videoElement);
            } else if (streamUrl.includes("mpd")) {
                player.src({ src: streamUrl, type: 'application/dash+xml' });
            } else if (videoElement.canPlayType('application/vnd.apple.mpegurl')) {
                videoElement.src = streamUrl;
                videoElement.addEventListener('loadedmetadata', () => {
                    videoElement.play();
                });
            } else {
                errorMessage.innerText = "Error: Unsupported stream format.";
            }
        }
        function reloadStream() {
            errorMessage.innerText = "Reloading stream...";
            if (hls) {
                hls.destroy();
            }
            loadStream();
        }
        loadStream();
    </script>
</body>
</html>
